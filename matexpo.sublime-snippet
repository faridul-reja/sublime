<snippet>
	<content><![CDATA[
 

int lim;
int mod = 10;

struct mat
{
    int arr[30][30]={};

    int  make_mat()
    {
        arr[0][0] = 1;
        arr[0][1] = 1;
        arr[1][0] = 1;
        arr[1][1] = 0;
    }
    mat operator *(mat o)
    {
        mat b;

        for (int i = 0; i < lim; ++i)
        {
            for(int j = 0; j < lim ; j++)
            {
                for(int k = 0; k < lim ; k++)
                {

                    b.arr[i][j] = (b.arr[i][j] + (1l * (arr[i][k] * o.arr[k][j])) % mod) % mod;

                }
            }
        }

        return b;
    }

    mat operator +(mat o)
    {
        mat r;

        for (int i = 0; i < lim; ++i)
        {
            for(int j = 0; j < lim ; j++)
            {
                r.arr[i][j] = (0l + arr[i][j] + o.arr[i][j]) % mod;
            }
        }
        return r;
    }

    void identity()
    {
        for (int i = 0; i < lim; ++i)
        {
          for(int j=0; j<lim ; j++){
              arr[i][j]=0;
          }
        }
        for (int i = 0; i < lim; ++i)
        {
            arr[i][i] = 1;
        }
    }

};


mat matpower(mat a, ll b)
{
    mat ans;
    ans.identity();

    while (b > 0)
    {
        if (b & 1)
            ans = ans * a;
        a = a * a;
        b >>= 1;
    }
    return ans;
}

 
]]></content>

<tabTrigger>matexpo</tabTrigger>
<scope>source.c++</scope>

	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<!-- <tabTrigger>hello</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
