<snippet>
	<content><![CDATA[


ll t[4*100000];
ll lazy[4*100000];



void build(int v,int tl,int tr){
  
   if(tl==tr){t[v]=arr[tl]; return}

   int mid=(tl+tr)/2;
   build(v*2,tl,mid);
   build(v*2+1,mid+1,tr);

   t[v]=t[v*2]+t[v*2+1];


}

void push(int v,int tl,int tr){

   if(lazy[v]){
      if(tl==tr){
        t[v]+=lazy[v];
        lazy[v]=0;
        return;
      }

      lazy[v*2]+=lazy[v];
      lazy[v*2+1]+=lazy[v];
      t[v]+=(tr-tl+1)*lazy[v];
      lazy[v]=0;
   }



}
 
int sum(int v, int tl, int tr, int l, int r) {
    
    push(v,tl,tr);

    if (l > r) 
        return 0;
    if (l == tl && r == tr) {
        return t[v];
    }
    int tm = (tl + tr) / 2;
    ll q= sum(v*2, tl, tm, l, min(r, tm))
           + sum(v*2+1, tm+1, tr, max(l, tm+1), r);

    t[v] = t[v*2] + t[v*2+1];
    
    return q;
    
}
 
 
void update(int v, int tl, int tr,int l, int r, ll val) {
   
      
    push(v,tl,tr);

    if (l > r) 
        return;

    if (l == tl && r == tr) {
      t[v]+=(tr-tl+1)*val;
      
      if(tl!=tr){
        lazy[v*2]+=val;
        lazy[v*2+1]+=val;
      }
        return;
    }



        int tm = (tl + tr) / 2;

        update(v*2, tl, tm, l, min(r, tm),val);
        update(v*2+1, tm+1, tr, max(l, tm+1),r,val);

        t[v] = t[v*2] + t[v*2+1];
    
}




void update(int v, int tl, int tr, int pos, ll new_val) {
    if (tl == tr) {
        t[v] = new_val;
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = t[v*2] + t[v*2+1];
    }
}
 
 
]]></content>

<tabTrigger>segmentTree</tabTrigger>
<scope>source.c++</scope>

	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<!-- <tabTrigger>hello</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
